/*Memoisation solution*/

class Solution {
private:
    int totalUniquePaths(vector<vector<int>>& grid , int i , int j , int m , int n , vector<vector<int>>& dp) {
        if(i == m - 1 and j == n - 1) return 1;

        if(dp[i][j] != -1) return dp[i][j];

        int left = 0, right = 0;
        if(i + 1 < m and grid[i + 1][j] != 1 and j < n) {
            left = totalUniquePaths(grid , i + 1 , j , m , n , dp);
        }
        if(i < m and j + 1 < n and grid[i][j + 1] != 1) {
            right = totalUniquePaths(grid , i , j + 1 , m , n , dp);
        }
        return dp[i][j] = left + right;
    }
public:
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        if(grid[0][0] or grid[m - 1][n - 1]) return 0;

        vector<vector<int>> dp(m , vector<int>(n , -1));
        return totalUniquePaths(grid , 0, 0 , m , n , dp);
    }
};


/*Tabulation Method*/

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        if(grid[0][0] or grid[m- 1][n - 1]) return 0;
        int dp[m][n];
        memset(dp , 0 , sizeof(dp));
        dp[0][0] = 1;

        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(i == 0 and j == 0) continue;

                if(i == 0 and grid[i][j] == 0) {
                    dp[i][j] = dp[i][j - 1];
                }
                else if(j == 0 and grid[i][j] == 0) {
                    dp[i][j] = dp[i - 1][j];
                }
                else if(grid[i][j] == 0){
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
        return dp[m - 1][n - 1];
    }
};
